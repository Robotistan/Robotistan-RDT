# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Robotistan
# This file is distributed under the same license as the PicoBricks package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PicoBricks 5.3.0-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-11 09:11+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../started/arduino.rst:2
msgid "Arduino IDE"
msgstr ""

#: ../../started/arduino.rst:6
msgid "Installation Arduino IDE"
msgstr ""

#: ../../started/arduino.rst:8
msgid ""
"Picobricks offers us the opportunity to code with Arduino C. Getting "
"started coding the Raspberry Pi Pico at the heart of Picobricks with the "
"widely used Arduino IDE is pretty easy."
msgstr ""

#: ../../started/arduino.rst:10
msgid ""
"Download the Arduino IDE 1.8.x setup file from `Arduino Website "
"<https://www.arduino.cc/en/software>`_ to your computer and install it."
msgstr ""

#: ../../started/arduino.rst:13
msgid ""
"First you need to add Raspberry Pi Pico to Arduino IDE. Start the Arduino"
" IDE. Then go to ``Tools>Board>Boards Manager``."
msgstr ""

#: ../../started/arduino.rst:20
msgid ""
"Write ``“Raspberry Pi Pico”`` in field 1. After waiting for a while, "
"click on the Arduino Mbed OS RP2040 Boards option and click the install "
"button in field 2."
msgstr ""

#: ../../started/arduino.rst:27
msgid ""
"During all these installations, you must accept the approvals it will ask"
" you for. When the installation is complete and click the close button, "
"you will have added Pico to the Arduino IDE."
msgstr ""

#: ../../started/arduino.rst:30
msgid "Writing and Running Code with Arduino IDE"
msgstr ""

#: ../../started/arduino.rst:32
msgid ""
"When you want to code Pico with Arduino IDE, you just have to connect it "
"to your computer by ``holding the BOOTSEL button for the first time.``"
msgstr ""

#: ../../started/arduino.rst:41
msgid ""
"In this way, Pico will be connected in bootloader mode and recognized by "
"your computer as external memory. Connect Pico to your computer by "
"holding down the Bootsel button. After seeing Pico as the computer's "
"flash memory, activate your card by going to ``Tools>Board>Arduino Mbed "
"OS RP2040 boards> Raspberry Pi Pico.``"
msgstr ""

#: ../../started/arduino.rst:48
msgid ""
"Write the code in the field number 1 below and follow the ``File>Save`` "
"path and save it anywhere on your computer with the name ``\"Blink\".``"
msgstr ""

#: ../../started/arduino.rst:55
msgid ""
"After the saving process, we must click the ``\"Upload\"`` button in the "
"1st field to compile the code and save it in Pico. When we see Done "
"uploading at the bottom, our code will run in Pico and the built-in LED "
"will blink at 1-second intervals. Important Note: While coding Picobricks"
" with Arduino IDE, connect it to your computer by pressing the BOOTSEL "
"button at the first pass from Micropython or Microblocks firmware. You do"
" not need to press BOOTSEL for subsequent code uploads. Enjoyable "
"projects :)"
msgstr ""

#: ../../started/microblocks.rst:3
msgid "MicroBlocks Block Programming Language"
msgstr ""

#: ../../started/microblocks.rst:9
msgid "What MicroBlocks Is?"
msgstr ""

#: ../../started/microblocks.rst:11
msgid ""
"MicroBlocks is a free, Scratch-like blocks programming language for "
"learning physical computing with educational microcontroller boards such "
"as the micro:bit, Adafruit Circuit Playground Express, and many others. "
"MicroBlocks is a live environment. Click on a block and it runs "
"immediately, right on the board. Try out commands. See and graph sensor "
"values in real time. No more waiting for code to compile and download. "
"Want to display an animation while controlling a motor? No problem! "
"MicroBlocks lets you write separate scripts for each task and run them at"
" the same time. Your code is simpler to write and easier to understand. "
"MicroBlocks runs on many different boards, but your scripts are portable."
" Buttons, sensors, and display blocks behave the same on all boards with "
"the relevant hardware. Once you run the code in MicroBlocks, you can "
"disconnect the USB and feed the Picobricks with a different power source."
" The code on the card will work automatically."
msgstr ""

#: ../../started/microblocks.rst:13
msgid ""
"To program Picobricks with MicroBlocks, let's open `MicroBlocks Website "
"<https://microblocks.fun/>`_  in the browser (Google Chrome and Edge "
"browsers are recommended)."
msgstr ""

#: ../../started/microblocks.rst:20
msgid ""
"You don't need to install anything to run MicroBlocks in a Chrome or Edge"
" browser; you can run the online editor by clicking the Run button in the"
" menu at the top right of the screen. Alternatively, by clicking the "
"Download button, you can download an off-line version suitable for your "
"operating system and install it on your computer."
msgstr ""

#: ../../started/microblocks.rst:22
msgid ""
"You can save MicroBlocks Web editor in your browser and use it without "
"internet access. Run MicroBlocks in your browser to register the "
"MicroBlocks Web app, then click the install button in the upper-right "
"corner of your browser's URL bar."
msgstr ""

#: ../../started/microblocks.rst:30
msgid "IDE Introduction"
msgstr ""

#: ../../started/microblocks.rst:32
msgid ""
"When you open the MicroBlocks program, you will see the IDE image shown "
"below. You can review the explanation of the IDE components below. For a "
"detailed and most current description of the IDE, please refer to our "
"User Guide in our WIKI."
msgstr ""

#: ../../started/microblocks.rst:39
msgid ""
"``Menu Bar:`` In this section, the first button from left to right allows"
" us to change the language option of the program. The second button is "
"the menu where we can see the operational settings of MicroBlocks and the"
" firmware update selection,  while the third button offers the File "
"related options. The fourth button opens a graph window used by the graph"
" block to plot data, while the fifth rightmost button is used to connect "
"to the  Picobricks via the USB interface.."
msgstr ""

#: ../../started/microblocks.rst:41
msgid ""
"``Block Categories:`` This field contains the categories of blocks used "
"for programming in MicroBlocks. Categories are grouped using different "
"colors. As the categories are selected, the relevant blocks will be "
"listed in the Blocks Palette (Field 3)."
msgstr ""

#: ../../started/microblocks.rst:43
msgid ""
"``Blocks Palette:`` As selections are made in the Block categories field,"
" blocks with specific functions will be listed in this field. code are "
"written by dragging and dropping the blocks in this area to the Scripting"
" area number 4."
msgstr ""

#: ../../started/microblocks.rst:45
msgid ""
"``Scripting Area:`` This is the area where all coding activities take "
"place. Users drag and drop blocks into this area to create scripts and "
"custom blocks (functions)."
msgstr ""

#: ../../started/microblocks.rst:47
msgid ""
"``Start/Stop Buttons:`` This area contains two icons, Start and Stop, "
"which are used to control the MicroBlocks programs."
msgstr ""

#: ../../started/microblocks.rst:49
msgid ""
"``Library List:`` The contents of this area reflects the various "
"libraries that are loaded depending on the requirements of the user "
"scripts and micro devices."
msgstr ""

#: ../../started/microblocks.rst:52
msgid "MicroBlocks-Picobricks Connection and Operation"
msgstr ""

#: ../../started/microblocks.rst:53
msgid "Connecting and Updating the Firmware in the Offline Editor"
msgstr ""

#: ../../started/microblocks.rst:55
msgid ""
"To connect Picobricks to the offline editor, you must connect the card to"
" your computer with the USB cable while ``holding the white BOOTSEL "
"button`` on the Raspberry Pi Pico."
msgstr ""

#: ../../started/microblocks.rst:62
msgid ""
"Open the MicroBlocks offline editor and from the MicroBlocks menu, click "
"the MicroBlocks button (gear icon), then click update firmware on board."
msgstr ""

#: ../../started/microblocks.rst:70
msgid ""
"You will be presented with a Pico board type selection. Select "
"RP2040(Pico). Firmware installation will only take a few seconds and when"
" finished, MicroBlocks will automatically connect to Picobricks."
msgstr ""

#: ../../started/microblocks.rst:77
msgid "Connecting and Updating the Firmware in the Online Editor"
msgstr ""

#: ../../started/microblocks.rst:79
msgid ""
"A few extra steps are required to connect Picobricks to the online "
"editor. For security reasons, the scanner cannot access the card's USB "
"drive without prompting the user. First, click the MicroBlocks button "
"(gear icon) from the menu, then click the update firmware on board option"
" and select the card type by clicking RP2040 (Pico) from the drop-down "
"list."
msgstr ""

#: ../../started/microblocks.rst:81
msgid ""
"When the card is selected, the Firmware Install window will open "
"displaying the following message."
msgstr ""

#: ../../started/microblocks.rst:83
msgid ""
"Now, while holding down the white BOOTSEL button on the Pico, connect the"
" card to your computer."
msgstr ""

#: ../../started/microblocks.rst:90
msgid ""
"Click the OK button on the displayed message and it will automatically "
"open the system file manager window positioned to the RPI-RP2 drive with "
"the firmware file named vm_pico.uf2 selected."
msgstr ""

#: ../../started/microblocks.rst:92
msgid "Click the Save button and the firmware update will complete."
msgstr ""

#: ../../started/microblocks.rst:99
msgid "Connecting for normal operations (Write & Edit programs):"
msgstr ""

#: ../../started/microblocks.rst:101
msgid ""
"Clicking the Connect button will display the system USB ports where the "
"micro devices are plugged in. In this window, you can connect Picobricks "
"to MicroBlocks by first selecting the Pico device and then clicking the "
"Connect buttons. When the connection is successful, a green circle will "
"appear behind the USB icon."
msgstr ""

#: ../../started/microblocks.rst:109
msgid ""
"MicroBlocks is a real-time coding editor. There is no process of "
"compiling and uploading the code to the card after they are written. When"
" you click on the code blocks, the code will run."
msgstr ""

#: ../../started/microblocks.rst:111
msgid ""
"To use any of the PicoBricks modules, you first, you need to import "
"Picobricks library into the Microblocks editor. You have to click the Add"
" Library button for this."
msgstr ""

#: ../../started/microblocks.rst:119
msgid ""
"In the File Open window, click the Kits and Boards button to open the "
"list of supported devices.Click PicoBricks from the drop-down list, and "
"then click the Open button."
msgstr ""

#: ../../started/microblocks.rst:126
msgid ""
"If all goes well, the PicoBricks library and code blocks will be "
"displayed in the Code blocks panel.In all the Project examples, whenever "
"you see a block name starting with PicoBricks, it will be located in the "
"PicoBricks Library menu."
msgstr ""

#: ../../started/microblocks.rst:134
msgid "PicoBricks Firmware"
msgstr ""

#: ../../started/microblocks.rst:136
msgid ""
"If you have previously updated PicoBricks Firmware, you can connect by "
"clicking the USB icon. If you are going to connect MicroBlocks to "
"Picobricks for the first time, you can follow the steps in section 1.1.2."
msgstr ""

#: ../../started/microblocks.rst:138
msgid ""
"It is a good idea to check from time to time if there is a new version of"
" the IDE or the Pico Firmware. You can verify the version you are running"
" by selecting MicroBlocks Options (wheel icon) / about in the menu. You "
"should see a display like:"
msgstr ""

#: ../../started/started.rst:12
msgid "PicoBricks with :"
msgstr ""

#: ../../started/started.rst:3
msgid "Getting Started"
msgstr ""

#: ../../started/thonny.rst:3
msgid "Thonny (MicroPython) IDE for Beginners"
msgstr ""

#: ../../started/thonny.rst:13
msgid "Thonny IDE Setup"
msgstr ""

#: ../../started/thonny.rst:15
msgid ""
"At the heart of Picobricks is the Raspberry Pi Pico. The Thonny Raspberry"
" Pi is a great choice for coding Pico and therefore Picobricks. Visit "
"`Thonny Website <https://thonny.org/>`_ Select the version suitable for "
"your system and download it to your computer. Then perform the "
"installation. You can also install the Thonny IDE, using the command “ $ "
"pip install thonny “"
msgstr ""

#: ../../started/thonny.rst:28
msgid "Thonny IDE Interface"
msgstr ""

#: ../../started/thonny.rst:37
msgid ""
"A: Opens an empty script file. B: Allows you to open an existing code "
"file. C: Allows you to save changes to the code file you are working on. "
"D: Runs the code you wrote in the interpreter environment you specify. E:"
" Allows you to check for errors in your code. F: Allows you to run lines "
"of code in order to debug. G: Lets you navigate through the commands in "
"the line of code while debugging. H: Lets you exit debug. I: Allows you "
"to switch from debug mode to run mode. J: Makes the code stop executing."
msgstr ""

#: ../../started/thonny.rst:49
msgid "Upload MicroPython Firmware to Raspberry Pi Pico"
msgstr ""

#: ../../started/thonny.rst:51
msgid ""
"In order for Raspberry Pi Pico to understand the MicroPython code we will"
" write, we must install a special operating system for it. We call this "
"firmware. Open the Thonny editor and click Select interpreter from the "
"Run menu."
msgstr ""

#: ../../started/thonny.rst:58
msgid ""
"Select the Raspberry Pi Pico from the drop-down list shown in area 1. "
"Leave the 2nd area as in the image, click on the 3rd area."
msgstr ""

#: ../../started/thonny.rst:65
msgid ""
"Connect Pico to your computer's USB port with a cable while ``holding "
"down the white bootsel button`` on it."
msgstr ""

#: ../../started/thonny.rst:72
msgid ""
"After the Install button is activated, you can release the button. Press "
"the ``Install button`` and wait for the firmware to load."
msgstr ""

#: ../../started/thonny.rst:79
msgid ""
"After the installation is complete, click the Close button to complete "
"the installation."
msgstr ""

#: ../../started/thonny.rst:83
msgid "Installing and Running Code on Raspberry Pi Pico"
msgstr ""

#: ../../started/thonny.rst:85
msgid ""
"Plug the Pico's cable directly into the computer's USB port. You don't "
"need to hold down the Bootsel button. Select the ``“Select interpreter”``"
" option from the Run menu in Thonny. Make sure Raspberry Pi Pico is "
"selected in section 1. Click the OK button to close the window."
msgstr ""

#: ../../started/thonny.rst:92
msgid ""
"Activate the Files option from the View menu. A long file explorer tab "
"will be placed on the left side of the screen. If you see Raspberry Pi "
"Pico in section 1, it means that it is connected to Thonny Pico without "
"any problems, you are ready to write, save and run your code. File "
"explorer area that shows the working directory on your computer."
msgstr ""

#: ../../started/thonny.rst:94
msgid ""
"The MicroPython code you wrote in Thonny consist of libraries arranged "
"for Raspberry Pi Pico and similar micro control cards and are called "
"MicroPython. The syntax and almost all libraries work the same as "
"MicroPython. The ``\"hello world\"`` application of the software world is"
" the ``\"blink\"`` application to physical programming. Write down the "
"code shown in field 1. Click the save button in area 2. Thonny will ask "
"you in the window in area 3 whether you want to save your code in the "
"working directory on your computer or in Pico's onboard memory. If you "
"choose your computer, the resulting file will appear in field 4, and if "
"you choose Pico, the resulting file will appear in field"
msgstr ""

#: ../../started/thonny.rst:102
msgid ""
"Select Raspberry Pi Pico from the Save in window, type ``“blink.py”``  in"
" the File Name field and click the OK button.After seeing the "
"``\"blink.py\"`` file in Pico's file explorer, click the F5 key on the "
"keyboard or the green Run button on the toolbar, and the code file will "
"be run by Pico. If you see the internal LED on the Pico blinking at 1 "
"second intervals, you have successfully written and run your first code. "
"Congratulations :)"
msgstr ""

#: ../../started/thonny.rst:105
msgid ""
"If you want the code you have written to run as soon as Pico is opened "
"without giving a run command, you should save your code in Pico's main "
"directory with the name ``\"main.py\".``"
msgstr ""

