# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Robotistan
# This file is distributed under the same license as the PicoBricks package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PicoBricks 5.3.0-dev\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-11 09:11+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"

#: ../../projects/NFC door.rst:3 smart
msgid "NFC Smart Door"
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:6 ../../projects/Two
#: ../../projects/Voice ../../projects/action-reaction.rst:6 ../../projects/air
#: ../../projects/alarm ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:6 ../../projects/blink.rst:6
#: ../../projects/buzz ../../projects/digital ../../projects/dinosaur
#: ../../projects/dominate ../../projects/graphic ../../projects/know
#: ../../projects/magic ../../projects/maze ../../projects/my
#: ../../projects/night ../../projects/show ../../projects/smart
#: ../../projects/smart-house.rst:6 ../../projects/thermometer.rst:6 Arm.rst:6
#: Axis Car.rst:6 Controlled Robot and bin.rst:6 clock.rst:6 color.rst:6
#: cooler.rst:6 day.rst:6 door.rst:6 game.rst:6 greenhouse.rst:6 lamp.rst:6
#: monitor.rst:6 piano.rst:6 reaction.rst:6 rhythm.rst:6 robot.rst:6
#: ruler.rst:6 smart solver the timer.rst:6 trash wire your
msgid "Introduction"
msgstr ""

#: ../../projects/NFC door.rst:7 smart
msgid "In this project, we will prepare a card entry system on a model house."
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:10 ../../projects/Two
#: ../../projects/Voice ../../projects/action-reaction.rst:14
#: ../../projects/air ../../projects/alarm ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:11 ../../projects/blink.rst:20
#: ../../projects/buzz ../../projects/digital ../../projects/dinosaur
#: ../../projects/dominate ../../projects/graphic ../../projects/know
#: ../../projects/magic ../../projects/maze ../../projects/my
#: ../../projects/night ../../projects/show ../../projects/smart
#: ../../projects/smart-house.rst:11 ../../projects/thermometer.rst:12
#: Arm.rst:10 Axis Car.rst:10 Controlled Robot and bin.rst:10 clock.rst:10
#: color.rst:10 cooler.rst:10 day.rst:10 door.rst:10 game.rst:10
#: greenhouse.rst:10 lamp.rst:10 monitor.rst:10 piano.rst:10 reaction.rst:10
#: rhythm.rst:10 robot.rst:10 ruler.rst:10 smart solver the timer.rst:10 trash
#: wire your
msgid "Project Details and Algorithm"
msgstr ""

#: ../../projects/NFC door.rst:12 smart
msgid ""
"``Security systems`` include technologies that can control authorizations"
" at building and room entrances. Card entry systems, in which only "
"authorized personnel can enter the operating rooms of hospitals, are one "
"of the first examples that come to mind. In addition, the entrance doors "
"of areas that should not be entered by persons or personnel of all levels"
" in military security centers are equipped with card and password entry "
"technologies. These electronic systems used in building and room "
"entrances not only prevent the entrance of unauthorized persons, but also"
" ensure that entry and exit information is kept under record. Password "
"entry, card entry, fingerprint scanning, face scanning, retina scanning "
"and voice recognition technologies are the authentication methods used in"
" electronic entry systems. Systems such as RFID and NFC are the basic "
"forms of contactless payment technologies today. Although the contactless"
" payment technology in credit cards is technically different, the working"
" logic is the same. The maximum distance between the reader and the card "
"is one of the features that distinguishes the technologies used from each"
" other. When leaving the shopping stores, especially in clothing stores, "
"NFC tags on the products will beep if they are detectioned to the readers"
" at the entrance. A kind of ``RFID technology`` is used in those systems."
msgstr ""

#: ../../projects/NFC door.rst:15 smart
msgid ""
"The electronic components we will use are MFRC522 RFID reader and 13.56 "
"Mhz cards. Place the MFRC522 reader near the door of the model so that it"
" is visible from the outside. Place the RGB LED and the buzzer on the "
"wall where the door is visible from the outside. Picoboard can remain in "
"the model. The entrance door of the model should be connected to the door"
" of the servo, while the servo is set to 0 degrees, the door should be "
"closed. You should determine the serial number of the RFID / NFC tag that"
" will open the door, create the homeowner variable and assign the serial "
"number to this variable."
msgstr ""

#: ../../projects/NFC door.rst:17 smart
msgid ""
"Set the door to the closed position when Picobricks starts. Make the "
"buzzer beep when a card is shown to the RFID reader. If the serial number"
" of the card being read matches the serial number in the homeowner "
"variable, turn the RGB LED on green. Then let the door open. Make sure "
"the door is closed 3 seconds after the door is opened. If the serial "
"number of the card being read does not match the homeowner variable, turn"
" the RGB LED on red. A different tone sounds from the buzzer."
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:21 ../../projects/Two
#: ../../projects/Voice ../../projects/action-reaction.rst:19
#: ../../projects/air ../../projects/alarm ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:16 ../../projects/blink.rst:27
#: ../../projects/buzz ../../projects/digital ../../projects/dinosaur
#: ../../projects/dominate ../../projects/graphic ../../projects/know
#: ../../projects/magic ../../projects/maze ../../projects/my
#: ../../projects/night ../../projects/show ../../projects/smart
#: ../../projects/smart-house.rst:19 ../../projects/thermometer.rst:17
#: Arm.rst:18 Axis Car.rst:18 Controlled Robot and bin.rst:20 clock.rst:17
#: color.rst:17 cooler.rst:17 day.rst:20 door.rst:21 game.rst:20
#: greenhouse.rst:19 lamp.rst:18 monitor.rst:14 piano.rst:21 reaction.rst:17
#: rhythm.rst:15 robot.rst:20 ruler.rst:20 smart solver the timer.rst:18 trash
#: wire your
msgid "Wiring Diagram"
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:30 ../../projects/Two
#: ../../projects/Voice ../../projects/action-reaction.rst:32
#: ../../projects/air ../../projects/alarm ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:29 ../../projects/blink.rst:39
#: ../../projects/buzz ../../projects/digital ../../projects/dinosaur
#: ../../projects/dominate ../../projects/graphic ../../projects/know
#: ../../projects/magic ../../projects/maze ../../projects/my
#: ../../projects/night ../../projects/show ../../projects/smart
#: ../../projects/smart-house.rst:29 ../../projects/thermometer.rst:30
#: Arm.rst:27 Axis Car.rst:27 Controlled Robot and bin.rst:29 clock.rst:30
#: color.rst:30 cooler.rst:27 day.rst:30 door.rst:30 game.rst:30
#: greenhouse.rst:28 lamp.rst:31 monitor.rst:27 piano.rst:30 reaction.rst:30
#: rhythm.rst:28 robot.rst:29 ruler.rst:29 smart solver the timer.rst:31 trash
#: wire your
msgid ""
"You can program and run Picobricks modules without any wiring. If you are"
" going to use the modules by separating them from the board, then you "
"should make the module connections with the Grove cables provided."
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:33 ../../projects/Two
#: ../../projects/Voice ../../projects/action-reaction.rst:35
#: ../../projects/air ../../projects/alarm ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:32 ../../projects/blink.rst:42
#: ../../projects/buzz ../../projects/digital ../../projects/dinosaur
#: ../../projects/dominate ../../projects/graphic ../../projects/know
#: ../../projects/magic ../../projects/maze ../../projects/my
#: ../../projects/night ../../projects/show ../../projects/smart
#: ../../projects/smart-house.rst:32 ../../projects/thermometer.rst:33
#: Arm.rst:30 Axis Car.rst:30 Controlled Robot and bin.rst:32 clock.rst:33
#: color.rst:33 cooler.rst:30 day.rst:33 door.rst:33 game.rst:33
#: greenhouse.rst:31 lamp.rst:34 monitor.rst:30 piano.rst:33 reaction.rst:33
#: rhythm.rst:31 robot.rst:32 ruler.rst:32 smart solver the timer.rst:34 trash
#: wire your
msgid "MicroPython Code of the Project"
msgstr ""

#: ../../projects/NFC door.rst:92 smart
msgid "MicroPyhton Card ID Code"
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:72 ../../projects/Two
#: ../../projects/Voice ../../projects/action-reaction.rst:50
#: ../../projects/air ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:68 ../../projects/blink.rst:55
#: ../../projects/buzz ../../projects/digital ../../projects/dominate
#: ../../projects/graphic ../../projects/maze ../../projects/my
#: ../../projects/night ../../projects/show ../../projects/smart
#: ../../projects/smart-house.rst:80 ../../projects/thermometer.rst:69
#: Arm.rst:124 Axis Car.rst:64 Controlled Robot and bin.rst:69 day.rst:136
#: door.rst:119 game.rst:91 greenhouse.rst:174 monitor.rst:53 piano.rst:130
#: reaction.rst:83 rhythm.rst:108 robot.rst:96 ruler.rst:98 smart solver the
#: timer.rst:126 trash wire your
msgid ""
"If you rename your code file to main.py, your code will run after every "
"boot."
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:75 ../../projects/Two
#: ../../projects/Voice ../../projects/action-reaction.rst:53
#: ../../projects/air ../../projects/alarm ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:71 ../../projects/blink.rst:58
#: ../../projects/buzz ../../projects/digital ../../projects/dinosaur
#: ../../projects/dominate ../../projects/graphic ../../projects/know
#: ../../projects/magic ../../projects/maze ../../projects/my
#: ../../projects/night ../../projects/show ../../projects/smart
#: ../../projects/smart-house.rst:83 ../../projects/thermometer.rst:72
#: Arm.rst:127 Axis Car.rst:67 Controlled Robot and bin.rst:72 clock.rst:115
#: color.rst:152 cooler.rst:63 day.rst:139 door.rst:122 game.rst:58 game.rst:94
#: greenhouse.rst:177 lamp.rst:54 monitor.rst:56 piano.rst:133 reaction.rst:86
#: rhythm.rst:111 robot.rst:99 ruler.rst:101 smart solver the timer.rst:129
#: trash wire your
msgid "Arduino C Code of the Project"
msgstr ""

#: ../../projects/NFC door.rst:226 smart
msgid "Arduino Card ID Code"
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:115 ../../projects/Two
#: ../../projects/action-reaction.rst:79 ../../projects/air
#: ../../projects/alarm ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:112 ../../projects/blink.rst:76
#: ../../projects/buzz ../../projects/digital ../../projects/dinosaur
#: ../../projects/dominate ../../projects/graphic ../../projects/know
#: ../../projects/magic ../../projects/maze ../../projects/my
#: ../../projects/night ../../projects/show ../../projects/smart
#: ../../projects/smart-house.rst:159 ../../projects/thermometer.rst:113
#: Arm.rst:224 Axis Robot and bin.rst:113 clock.rst:180 color.rst:270
#: cooler.rst:101 day.rst:310 door.rst:272 game.rst:96 game.rst:176
#: greenhouse.rst:332 lamp.rst:85 monitor.rst:86 piano.rst:227 reaction.rst:197
#: rhythm.rst:184 robot.rst:161 ruler.rst:173 smart solver the timer.rst:233
#: trash wire your
msgid "Coding the Project with MicroBlocks"
msgstr ""

#: ../../projects/NFC door.rst:274 smart
msgid "|nfc-smart-door1|"
msgstr ""

#: ../../projects/NFC door.rst:277 smart
msgid "nfc-smart-door1"
msgstr ""

#: ../../projects/NFC ../../projects/Piggy-Bank.rst:125 ../../projects/Two
#: ../../projects/Voice ../../projects/action-reaction.rst:90
#: ../../projects/air ../../projects/alarm ../../projects/automatic
#: ../../projects/autonomous-lighting.rst:123 ../../projects/buzz
#: ../../projects/digital ../../projects/dinosaur ../../projects/dominate
#: ../../projects/graphic ../../projects/know ../../projects/magic
#: ../../projects/maze ../../projects/my ../../projects/night
#: ../../projects/show ../../projects/smart ../../projects/smart-house.rst:169
#: ../../projects/thermometer.rst:123 Arm.rst:234 Axis Car.rst:137 Controlled
#: Robot and bin.rst:123 clock.rst:190 color.rst:280 cooler.rst:111 day.rst:321
#: door.rst:282 game.rst:106 game.rst:186 greenhouse.rst:342 lamp.rst:95
#: monitor.rst:97 piano.rst:237 reaction.rst:207 rhythm.rst:197 robot.rst:171
#: ruler.rst:183 smart solver the timer.rst:243 trash wire your
msgid ""
"To code with MicroBlocks, simply drag and drop the image above to the "
"MicroBlocks Run tab."
msgstr ""

#: ../../projects/Piggy-Bank.rst:3
msgid "Piggy Bank"
msgstr ""

#: ../../projects/Piggy-Bank.rst:7
msgid ""
"In this project, you will make yourself a very enjoyable and cute piggy "
"bank. You will use the servo motor and ultrasonic distance sensor while "
"making the piggy bank."
msgstr ""

#: ../../projects/Piggy-Bank.rst:13
msgid ""
"Ultrasonic sensors are sensors that show electrical change by being "
"affected by sound waves. These sensors send sound waves at a frequency "
"that our ears cannot detect and produce distance information by "
"calculating the return time of the reflected sound waves. We, the "
"programmers, develop projects by making sense of the measured distance "
"and the changes in distance. Parking sensors in the front and back of the"
" cars are the places where ultrasonic sensors are most common in daily "
"life. Do you know the creature that finds its way in nature with this "
"method? Because bats are blind, they find their way through the "
"reflections of the sounds they make. Many of us like to save money. It is"
" a very nice feeling that the money we save little by little is useful "
"when needed."
msgstr ""

#: ../../projects/Piggy-Bank.rst:15 ../../projects/digital ruler.rst:14
msgid ""
"Different types of buttons are used in electronic systems. Locked "
"buttons, push buttons, switched buttons... There is 1 push button on "
"Picobricks. They work like a switch, they conduct current when pressed "
"and do not conduct current when released. In the project, we will "
"understand the pressing status by checking whether the button conducts "
"current or not. If it is pressed, it will light the LED, if it is not "
"pressed, we will turn off the LED."
msgstr ""

#: ../../projects/Piggy-Bank.rst:17
msgid ""
"HC-SR04 ultrasonic distance sensor and SG90 servo motor will be used in "
"this project. When the user leaves money in the hopper of the piggy bank,"
" the distance sensor will detect the proximity and send it to the "
"Picobricks. According to this information, Picobricks will operate a "
"servo motor and raise the arm, throw the money into the piggy bank and "
"the arm will go down again."
msgstr ""

#: ../../projects/Piggy-Bank.rst:117
msgid "|piggy-bank1|"
msgstr ""

#: ../../projects/Piggy-Bank.rst:120
msgid "piggy-bank1"
msgstr ""

#: ../../projects/Two Arm.rst:3 Axis Robot
msgid "Two Axis Robot Arm"
msgstr ""

#: ../../projects/Two Arm.rst:7 Axis Robot
msgid "In this project you will learn about robot arm with Picobricks."
msgstr ""

#: ../../projects/Two Arm.rst:13 Axis Robot
msgid ""
"Robot arms have replaced human power in the industrial field. In "
"factories, robotic arms undertake the tasks of carrying and turning loads"
" of weights and sizes that cannot be carried by a human. Being able to be"
" positioned with a precision of one thousandth of a millimeter is above "
"the sensitivity that a human hand can exhibit. When you watch the "
"production videos of automobile factories, you will see how vital the "
"robot arms are. The reason why they are called robots is that they can be"
" programmed to do the same work with endless repetitions. The reason why "
"it is called an arm is because it has an articulated structure like our "
"arms. How many different directions a robot arm has the ability to rotate"
" and move is expressed as axes. Robot arms are also used for carving and "
"shaping aluminum and various metals. These devices, which are referred to"
" as 7-axis CNC Routers, can shape metals like a sculptor shapes mud. "
"According to the purpose of use in robot arms, stepper motor and servo "
"motors, which are a kind of electric motor, are used. PicoBricks allows "
"you to make projects with servo motors."
msgstr ""

#: ../../projects/Two Arm.rst:15 Axis Robot
msgid ""
"In preparation for the installation, we will first write and upload the "
"codes to set the servo motors to 0 degrees. When an object is placed on "
"the LDR sensor, the robot arm will bend down and close its open gripper. "
"After the gripper is closed, the robot arm will rise again. As a result "
"of each movement of the robot arm, a short beep will be heard from the "
"buzzer. The RGB LED will glow red when an object is placed on the LDR "
"sensor. When the object is held by the robot arm and lifted into the air,"
" the RGB LED will turn green. Servo motor movements are very fast. In "
"order to slow down the movement, we will code the servo motors with a "
"total of 90 degrees of movement, 2 degrees each at 30 millisecond "
"intervals. We’re not going to do this for the gripper to close."
msgstr ""

#: ../../projects/Two Arm.rst:226 Axis Robot
msgid "|two-axis-robot-arm2|"
msgstr ""

#: ../../projects/Two Arm.rst:229 Axis Robot
msgid "two-axis-robot-arm2"
msgstr ""

#: ../../projects/Voice Car.rst:3 Controlled
msgid "Voice Controlled Car"
msgstr ""

#: ../../projects/Voice Car.rst:7 Controlled
msgid ""
"In the project, the robot car kit that comes out of the set will be "
"assembled and controlled via mobile phone."
msgstr ""

#: ../../projects/Voice Car.rst:12 Controlled
msgid ""
"Developing and continuing to develop artificial intelligence applications"
" recognize human characteristics, learn and try to behave like people. We"
" can express ``artificial intelligence`` as software that can learn in "
"its shortest form. Sometimes it learns the image, sometimes the sound, "
"and sometimes by using the data it collects from the sensors. It does "
"this thanks to the algorithms determined by the developers, and it helps "
"in the decision-making processes in the areas it is used according to the"
" results it has achieved. In short, artificial intelligence applications "
"are now used in situations where the decision-making process needs to be "
"done quickly and without errors. From the marketing field to the defense "
"industry, from education to health, from economy to entertainment, "
"artificial intelligence increases efficiency and reduces costs. In this "
"project we will do with PicoBricks, we will make a 2WD car that you can "
"control by talking. PicoBricks allows you to communicate wirelessly with "
"2 6V DC motors and bluetooth."
msgstr ""

#: ../../projects/Voice Car.rst:15 Controlled
msgid ""
"The HC05 bluetooth module is a module that enables us to communicate "
"wirelessly between PicoBricks and a mobile phone. Thanks to the mobile "
"application installed on the mobile phone in the project, the commands "
"sent from the phone will be transmitted to PicoBricks via the HC05 module"
" and the robot car will move according to these data. We can direct the "
"robot car with the forward, backward, right, left buttons from the mobile"
" phone, as well as send data to PicoBricks with voice command. In the "
"project, we will give voice commands to control the movements of the "
"robot car."
msgstr ""

#: ../../projects/Voice Car.rst:125 Controlled
msgid "Coding the Project with Microblocks"
msgstr ""

#: ../../projects/Voice Car.rst:128 Controlled
msgid "|voice-controlled-car2|"
msgstr ""

#: ../../projects/Voice Car.rst:131 Controlled
msgid "voice-controlled-car2"
msgstr ""

#: ../../projects/action-reaction.rst:3
msgid "Action-Reaction"
msgstr ""

#: ../../projects/action-reaction.rst:7
msgid ""
"In the project, we will understand the pressing status by checking "
"whether the button conducts current or not. If it is pressed, it will "
"light the LED, if it is not pressed, we will turn off the LED."
msgstr ""

#: ../../projects/action-reaction.rst:10
msgid ""
"As Newton explained in his laws of motion, a reaction occurs against "
"every action. Electronic systems receive commands from users and perform "
"their tasks. Usually a keypad, touch screen or a button is used for this "
"job. Electronic devices respond verbally, in writing or visually to "
"inform the user that their task is over and what is going on during the "
"task. In addition to informing the user of these reactions, it can help "
"to understand where the fault may be in a possible malfunction. In this "
"project, you will learn how to receive and react to a command from the "
"user in your projects by coding the button-LED module of Picobricks."
msgstr ""

#: ../../projects/action-reaction.rst:16
msgid ""
"There is 1 push button on Picobricks. They work like a ``switch``, they "
"conduct current when pressed and do not conduct current when released."
msgstr ""

#: ../../projects/action-reaction.rst:81
msgid "|action-reaction3|"
msgstr ""

#: ../../projects/action-reaction.rst:84
msgid "action-reaction3"
msgstr ""

#: ../../projects/air piano.rst:3
msgid "Air Piano"
msgstr ""

#: ../../projects/air piano.rst:7
msgid ""
"In this project we will make a simple piano that can play 8 notes with "
"PicoBricks."
msgstr ""

#: ../../projects/air piano.rst:12
msgid ""
"With the development of electronic technology, musical instruments that "
"are difficult to produce, expensive and producing high-quality sound have"
" been digitized. Pianos are one of these instruments. Each key of digital"
" pianos produces electrical signals at a different frequency. Thus, it "
"can play 88 different notes from its speakers. Factors such as the delay "
"time of the keys of digital instruments, the quality of the speaker, the "
"resolution of the sound have appeared as the factors affecting the "
"quality. In electric guitars, vibrations in strings are digitized instead"
" of keys. On the other hand, In wind instruments, the notes played can be"
" converted into electrical signals and recorded thanks to the high-"
"resolution microphones plugged into the sound output. This development in"
" electronic technology has facilitated access to high-cost musical "
"instruments, music education has gained a wider variety and spread to a "
"wider audience."
msgstr ""

#: ../../projects/air piano.rst:15
msgid ""
"The speaker of this piano will be the buzzer. The ultrasonic sensor will "
"act as the keys of the piano. In this project, we will make a piano "
"application using the ``HC-SR04 Ultrasonic distance sensor`` and the "
"``buzzer module`` on PicoBricks. We will make the buzzer play different "
"notes according to the values coming from the distance sensor, and we "
"will create melodies by moving our hand closer to the sensor and away "
"from it. In addition, we will instantly print the distance played note "
"information on the OLED screen."
msgstr ""

#: ../../projects/air piano.rst:229
msgid "|air-piano1|"
msgstr ""

#: ../../projects/air piano.rst:232
msgid "air-piano1"
msgstr ""

#: ../../projects/alarm clock.rst:3
msgid "Alarm Clock"
msgstr ""

#: ../../projects/alarm clock.rst:7
msgid ""
"In this project, we will create a timer alarm that adjusts for daylight "
"using the light sensor in Picobricks. In this project we will make a "
"simple alarm application. The alarm system we will design is designed to "
"sound automatically in the morning. For this, we will use LDR sensor in "
"the project."
msgstr ""

#: ../../projects/alarm clock.rst:12
msgid ""
"Global warming is affecting the climate of our world worse every day. "
"Countries take many precautions and sign agreements to reduce the effects"
" of global warming. The use of renewable energy sources and the efficient"
" use of energy is an issue that needs attention everywhere, from "
"factories to our rooms. Many reasons such as keeping road and park "
"lighting on in cities due to human error, and the use of high energy "
"consuming lighting tools reduce energy efficiency. Many electronic and "
"digital systems are developed and programmed by engineers to measure the "
"light, temperature and humidity values of the environment and ensure that"
" they are used only when needed and in the right amounts."
msgstr ""

#: ../../projects/alarm clock.rst:14
msgid ""
"At night, the OLED screen will display a good night message to the user, "
"in the morning, an alarm will sound with a buzzer sound, a good morning "
"message will be displayed on the screen, and the RGB LED will light up in"
" white for light notification. The user will have to press the button of "
"Picobricks to stop the alarm. After these processes, which continue until"
" the alarm is stopped, when the button is pressed, the buzzer and RGB LED"
" will turn off and a good day message will be displayed on the OLED "
"screen."
msgstr ""

#: ../../projects/alarm ../../projects/dinosaur ../../projects/know
#: ../../projects/magic ../../projects/smart clock.rst:112 color.rst:149
#: cooler.rst:60 game.rst:55 lamp.rst:51 your
msgid ""
"Ifyou rename your code file to main.py, your code will run after every "
"boot."
msgstr ""

#: ../../projects/alarm clock.rst:183
msgid "|alarm-clock2|"
msgstr ""

#: ../../projects/alarm clock.rst:186
msgid "alarm-clock2"
msgstr ""

#: ../../projects/automatic bin.rst:3 trash
msgid "Automatic Trash Bin"
msgstr ""

#: ../../projects/automatic bin.rst:7 trash
msgid ""
"In this project, you will make a mobile and automatic stylish trash bin "
"for your room using an ultrasonic sensor and servo motor with PicoBricks."
msgstr ""

#: ../../projects/automatic bin.rst:13 trash
msgid ""
"The Covid 19 pandemic has changed people's daily routines in many areas. "
"In many areas such as cleaning, working, shopping and social life, people"
" were introduced to a series of new rules that they had to comply with. "
"Covid-19 has LED to the development of new business areas as well as some"
" products to stand out. At a time when hand hygiene was very important, "
"no one wanted to touch the lid of the trash can to throw away their "
"garbage. When approached, the lids of which open automatically and when "
"it is full, the trash bins, which make bags ready to be thrown away, "
"found buyers at prices far above their cost. In addition, automatic "
"disinfectant machines provided contactless hygiene by pouring a certain "
"amount of liquid into our palms when we held them under our hands. "
"Automatic disinfectant machines took place on the shelves at prices well "
"above their cost. These two products have similarities in terms of "
"working system. In automatic disinfectant machines, a pump with an "
"electric motor directly transfers the liquid, and some models have "
"devices based on the pumping system with the power of the servo motor. In"
" automatic trash bins, a servo motor that opens the lid was used, and "
"infrared or ultrasonic sensors were used to detect hand movement."
msgstr ""

#: ../../projects/automatic bin.rst:15 trash
msgid ""
"HC-SR04 ultrasonic distance sensor and SG90 servo motor will be used in "
"this project. When the user puts his hand in front of the lid of the "
"trash can, the distance sensor will detect the proximity and send it to "
"the Picobricks. According to this information, Picobricks will open the "
"lid of the garbage can by running a servo motor and will lower it again "
"after a short while."
msgstr ""

#: ../../projects/automatic bin.rst:115 trash
msgid "|automatic-trash-bin1|"
msgstr ""

#: ../../projects/automatic bin.rst:118 trash
msgid "automatic-trash-bin1"
msgstr ""

#: ../../projects/autonomous-lighting.rst:3
msgid "Autonomous Lighting"
msgstr ""

#: ../../projects/autonomous-lighting.rst:7
msgid ""
"In this project, with PicoBricks, we will enable the LED to turn on when "
"the amount of light decreases in order to understand the working systems "
"of the systems where the lighting is turned on automatically when it gets"
" dark."
msgstr ""

#: ../../projects/autonomous-lighting.rst:13
msgid ""
"It is called the state of being autonomous when electronic systems make a"
" decision based on the data they collect and perform the given task "
"automatically. The components that enable electronic systems to collect "
"data from their environment are called sensors. Many data such as the "
"level of light in the environment, how many degrees the air temperature "
"is, how many lt/min water flow rate, how loud the sound is, are collected"
" by the sensors and transmitted to PicoBricks as electrical signals, that"
" is data. There are many sensors in Picobricks. Knowing how to get data "
"from sensors and how to interpret and use that data will improve project "
"ideas like reading a book improves vocabulary."
msgstr ""

#: ../../projects/autonomous-lighting.rst:115
msgid "|autonomous-lighting2|"
msgstr ""

#: ../../projects/autonomous-lighting.rst:118
msgid "autonomous-lighting2"
msgstr ""

#: ../../projects/blink.rst:3
msgid "Blink"
msgstr ""

#: ../../projects/blink.rst:7
msgid ""
"In real life, the employee, who has just started to learn the job, first "
"undertakes the most basic task.The cleaner first learns to use the broom,"
" the cook learns to use the kitchen utensils, the waiter to carry a tray."
" We can come up with many examples. The first code written by newcomers "
"to software development is known as ``\"Hello World\"``. Printing \"Hello"
" World\" as soon as the program starts on the screen or console window in"
" the language they use is the first step in programming. Like a baby "
"starting to crawl…"
msgstr ""

#: ../../projects/blink.rst:15
msgid ""
"The first step in physical computing is the Blink application: "
"controlling the on/off status of a LED. By simply connecting an LED to "
"the microprocessor board, the code keeps the LED blinking continuously. "
"Ask people who have developed themselves in the field of robotics "
"programming how they got to this level. The answer they will give you "
"starts like this; it all started with a flashing LED!"
msgstr ""

#: ../../projects/blink.rst:17
msgid ""
"LEDs are the language of electronic devices. Thanks to the LEDs, the "
"programmer tells the users at which stage of the task the device is, what"
" the problem is, if any, and which options are active. In this project, "
"you will learn the types of LEDs on the Picobricks and learn how to turn "
"them on and off."
msgstr ""

#: ../../projects/blink.rst:22
msgid ""
"There are 1 x 5mm red LED and 1 x WS2812B RGB LED on Picobricks. While "
"normal LEDs light up in one color, RGB LEDs can light up in many "
"different colors. In this project we will use the red LED on PicoBricks."
msgstr ""

#: ../../projects/blink.rst:24
msgid ""
"We will write code to turn on the red LED and turn it off after a certain"
" time. We will adjust our code to repeat this process continuously."
msgstr ""

#: ../../projects/blink.rst:78
msgid ""
"Drag and drop the ``when started block`` from the ``Control`` category to"
" the Scripting area."
msgstr ""

#: ../../projects/blink.rst:80
msgid "This block executes the code under it whenever the Start button is clicked"
msgstr ""

#: ../../projects/blink.rst:86
msgid ""
"Then, drag the ``forever`` block from the ``Control`` category and add it"
" under the when started block."
msgstr ""

#: ../../projects/blink.rst:88
msgid ""
"Forever block will execute the blocks placed within it non-stop (forever,"
" as the name implies)."
msgstr ""

#: ../../projects/blink.rst:95
msgid ""
"Drag the PicoBricks ``set red LED block`` and drop it into the "
"``forever`` block.The boolean TRUE (green) selection in the block will "
"make the LED turn on. Alternatively, the FALSE (red) selection will make "
"the LED go off."
msgstr ""

#: ../../projects/blink.rst:97
msgid "Test if the red LED is lit by pressing the ``start`` button"
msgstr ""

#: ../../projects/blink.rst:104
msgid ""
"Now, to turn off the red LED, click once on the boolean control in the "
"block to set it to red. This setting means FALSE and should turn off the "
"LED."
msgstr ""

#: ../../projects/blink.rst:106
msgid "Test whether the LED goes out by pressing the Start button again."
msgstr ""

#: ../../projects/blink.rst:114
msgid ""
"Now, we will modify our code to make the LED go on and off by itself at "
"certain time intervals."
msgstr ""

#: ../../projects/blink.rst:116
msgid ""
"Drag the ``wait 500 millisecs`` block from the ``Control`` category and "
"add it below the ``PicoBricks set red LED`` block."
msgstr ""

#: ../../projects/blink.rst:123
msgid ""
"Then add the ``Picobricks set red LED block`` again under the ``wait 500 "
"millisecs`` block and set the boolean control to False."
msgstr ""

#: ../../projects/blink.rst:125
msgid "Add another wait ``500 millisecs`` block to the bottom."
msgstr ""

#: ../../projects/blink.rst:127
msgid ""
"When you press the ``start`` button, you will see the red LED blink at "
"500 millisecond intervals. The number 500 in the ``wait 500 millisecs`` "
"block represents milliseconds. You can change this number as you wish. "
"One second is 1000 milliseconds."
msgstr ""

#: ../../projects/buzz game.rst:3 wire
msgid "Buzz Wire Game"
msgstr ""

#: ../../projects/buzz game.rst:7 wire
msgid ""
"In this project, we will electronically prepare the attention and "
"concentration developer Buzz Wire Game with the help of a conductor wire "
"using the buzzer and LED module with Picobricks. While preparing this "
"project, you will have learned an input technique that is not a button "
"but will be used like a ``button``."
msgstr ""

#: ../../projects/buzz game.rst:12 wire
msgid ""
"Projects don't always have to be about solving problems and making things"
" easier. You can also prepare projects to have fun and develop yourself. "
"Attention and concentration are features that many people want to "
"develop. The applications that we can do with this are quite interesting."
" How about making Buzz Wire Game with Picobricks? You must have heard the"
" expression that computers work with 0s and 1s. 0 represents the absence "
"of electricity and 1 represents its presence. 0 and 1’s come together "
"with a certain number and sequence of combinations to form meaningful "
"data. In electronic systems, 0s and 1s can be used to directly control a "
"situation. Is the door closed or not? Is the light on or off? Is the "
"irrigation system on or not? In order to obtain such information, a "
"status check is carried out. In this project, we will electronically "
"prepare the attention and concentration developer Buzz Wire Game with the"
" help of a conductor wire using the buzzer and LED module with "
"Picobricks. While preparing this project, you will have learned an input "
"technique that is not a button but will be used like a button."
msgstr ""

#: ../../projects/buzz game.rst:15 wire
msgid ""
"To prepare the project, you need 2 male-male jumper cables and a 15 cm "
"long conductor bendable wire. When the player is ready, it will be asked "
"to press the button to start the game. If the jumper cable touches the "
"conductor wire in the player’s hand when the button is pressed, "
"Picobricks will detect this and give an audible and written warning. The "
"time from the start of the game to the end will also be displayed on the "
"OLED screen. We reset the timer after the user presses the button. Then "
"we will give a voltage of 3.3V to the conductor wire connected to the "
"GPIO1 pin of Picobricks. One end of the cable held by the player will be "
"connected to the GND pin on the Picobricks. If the player touches the "
"jumper cable in his hand to the conductive wire, the GPIO1 pin will drop "
"to the ``Passive/Off/0 position``. Then, it will announce that the game "
"is over, and there will be light, written and audio feedback, then the "
"elapsed time will be shown on the OLED screen in milliseconds. After 5 "
"seconds, the player will be prompted to press the button to restart."
msgstr ""

#: ../../projects/buzz game.rst:179 wire
msgid "|buzz-wire-game1|"
msgstr ""

#: ../../projects/buzz game.rst:182 wire
msgid "buzz-wire-game1"
msgstr ""

#: ../../projects/digital ruler.rst:3
msgid "Digital Ruler"
msgstr ""

#: ../../projects/digital ruler.rst:7
msgid ""
"In this project, you will learn how to receive and react to a command "
"from the user in your projects by coding the button-LED module of "
"Picobricks."
msgstr ""

#: ../../projects/digital ruler.rst:12
msgid ""
"As Newton explained in his laws of motion, a reaction occurs against "
"every action. Electronic systems receive commands from users and perform "
"their tasks. Usually a keypad, touch screen or a button is used for this "
"job. Electronic devices respond verbally, in writing or visually to "
"inform the user that their task is over and what is going on during the "
"task. In addition to informing the user of these reactions, it can help "
"to understand where the fault may be in a possible malfunction."
msgstr ""

#: ../../projects/digital ruler.rst:175
msgid "|digital-ruler1|"
msgstr ""

#: ../../projects/digital ruler.rst:178
msgid "digital-ruler1"
msgstr ""

#: ../../projects/dinosaur game.rst:3
msgid "Dinosaur Game"
msgstr ""

#: ../../projects/dinosaur game.rst:7
msgid ""
"In this project you will learn how to control Servo motors with "
"PicoBricks. While writing the project codes, we will first fix the LDR "
"sensor on the computer screen and read the sensor data on the white and "
"black background, then write the necessary codes for the servo motor to "
"move according to these data."
msgstr ""

#: ../../projects/dinosaur game.rst:12
msgid ""
"If the electronic systems to be developed will fulfill their duties by "
"pushing, pulling, turning, lifting, lowering, etc., pneumatic systems or "
"electric motor systems are used as actuators in the project. Picobricks "
"supports two different engine types so that you can produce systems that "
"can activate the codes you write in your projects. DC motor and Servo "
"motors in which the movements of DC motors are regulated electronically. "
"Servo motors are motors that rotate to that angle when the rotation angle"
" value is given. In RC boats, servo motors are used with the same logic "
"to change the direction of the vehicle. In addition, advanced servo "
"motors known as smart continuous servos, which can rotate full-round, are"
" also used in the wheels of the smart vacuum cleaners we use in our "
"homes."
msgstr ""

#: ../../projects/dinosaur game.rst:14
msgid ""
"In this project, we will automatically play Google Chrome offline "
"dinasour game to picobricks. In the game, Picobricks will automatically "
"control the dinosaur’s movements by detecting obstacles. We will use the "
"picobricks LDR sensor to detect the obstacles in front of the dinosaur "
"during the game. LDR can send analog signals by measuring the amount of "
"light touching the sensor surface. By fixing the sensor on the computer "
"screen, we can detect if there is an obstacle in front of the dinosaur by"
" taking advantage of the difference in the amount of light between the "
"white and black colors. When an obstacle is detected, we can use a servo "
"motor to automatically press the spacebar on the keyboard. In this way, "
"the dinosaur will easily overcome the obstacles. While writing the "
"project codes, we will firstly fix the LDR sensor on the computer screen "
"and read the sensor data on the white and black background, then write "
"the necessary codes for the servo motor to move according to these data."
msgstr ""

#: ../../projects/dinosaur game.rst:98
msgid "|dinosaur-game1|"
msgstr ""

#: ../../projects/dinosaur game.rst:101
msgid "dinosaur-game1"
msgstr ""

#: ../../projects/dominate rhythm.rst:3 the
msgid "Dominate The Rhythm"
msgstr ""

#: ../../projects/dominate rhythm.rst:7 the
msgid ""
"When the user presses the button to start the song, we will prepare the "
"note codes that will allow the notes to play for the duration calculated "
"according to the rthm variable."
msgstr ""

#: ../../projects/dominate rhythm.rst:12 the
msgid ""
"Many events in our lives have been digitized. One of them is sounds. The "
"tone and intensity of the sound can be processed electrically. So we can "
"extract notes electronically. The smallest unit of sounds that make up "
"music is called a note. Each note has a frequency and intensity. With the"
" codes we will write, we can adjust which note should be played and how "
"long it should last by applying frequency and intensity. In this project,"
" we will prepare a music system that will play the melody of a song using"
" the buzzer module and adjust the rhythm with the ``potentiometer "
"module`` with Picobricks. You will also learn the use of variables, which"
" has an important place in programming terminology, in this project. With"
" Picobricks you can play any song whose sheet we know. We will use the "
"button-LED module to start the song, the potentiometer module to adjust "
"the speed of the song, and the buzzer module to play the notes. "
"Potentiometer is analog input module. It is variable resistance. As the "
"amount of current flowing through it is turned, it increases and "
"decreases like opening and closing a faucet. We will adjust the speed of "
"the song by controlling this amount of current with codes. Buzzers change"
" the sound levels according to the intensity of the current passing over "
"them, and the sound tones according to the voltage frequency. With "
"Microblock's, we can easily code the notes we want from the buzzer module"
" by adjusting their tones and durations. We will check the button press "
"status in the project. We will make the melody start playing when the "
"button is pressed. During the playing of the melody, we will use a "
"variable called rthm to increase or decrease the playing times of the "
"notes at the same rate. After Picobricks starts, we will enable the user "
"to adjust the rthm variable with the potentiometer, either while playing "
"the melody or before playing it. As long as Picobricks is on, we will "
"divide the potentiometer value ``(0-1023) by 128`` and assign it to the "
"rthm variable. Variables are data structures that we use when we want to "
"use values that can be changed by the user or sensors in our codes."
msgstr ""

#: ../../projects/dominate rhythm.rst:186 the
msgid "|dominate-rhythm2|"
msgstr ""

#: ../../projects/dominate rhythm.rst:189 the
msgid "dominate-rhythm2"
msgstr ""

#: ../../projects/graphic monitor.rst:3
msgid "Graphic Monitor"
msgstr ""

#: ../../projects/graphic monitor.rst:7
msgid ""
"In this project, we will prepare a project in which we increase or "
"decrease the brightness of the red LED with a potentiometer. In addition,"
" we will simultaneously monitor the electrical change occurring during "
"this process on the Microblocks graphic monitor. When the picobricks "
"starts, the potentiometer value will be read continuously and the "
"brightness value of the LED will be adjusted. Applications in which the "
"effect of the electrical signal is reduced by changing the frequency is "
"called ``PWM``. We will send the analog values we read from the "
"potentiometer as PWM signals to the red LED and we will be able to adjust"
" the illumination intensity."
msgstr ""

#: ../../projects/graphic monitor.rst:11
msgid ""
"When we look at the electronic items around us, you realize that they "
"have many replaceable features and they are designed by engineers to be "
"most useful to the user. Such as lighting systems, cooking systems, sound"
" systems, cleaning systems. The way it works, the amount, the method, "
"etc., by many system users. features can be programmed to change. In "
"robotic projects, in the processes of changing the sound level, changing "
"the motor speed, changing the brightness of the light, the electrical "
"voltage is sent in a way that creates a lower or higher effect. By "
"decreasing the frequency of the electrical signal to the component, it "
"can be operated at a lower level, and by increasing the frequency of the "
"outgoing electrical signals, it can be operated at a higher level. In "
"systems without a screen, real-time graphic monitors are used to monitor "
"some sensors and variables involved in the operation of the system. "
"Graphic monitors make it very easy to detect the fault."
msgstr ""

#: ../../projects/graphic monitor.rst:89
msgid "|graphic-monitor2|"
msgstr ""

#: ../../projects/graphic monitor.rst:92
msgid "graphic-monitor2"
msgstr ""

#: ../../projects/know color.rst:3 your
msgid "Know Your Color"
msgstr ""

#: ../../projects/know color.rst:7 your
msgid ""
"In this project you will learn about the randomness used in every "
"programming language. We will prepare a enjoyable game with the RGB LED, "
"OLED screen and button module of Picobricks. The game we will build in "
"the project will be built on the user knowing the colors correctly or "
"incorrectly."
msgstr ""

#: ../../projects/know color.rst:12 your
msgid ""
"LEDs are often used on electronic systems. Each button can have small "
"LEDs next to each option. By making a single LED light up in different "
"colors, it is possible to do the work of more than one LED with a single "
"LED. LEDs working in this type are called RGB LEDs. It takes its name "
"from the initials of the color names Red, Green, Blue. Another advantage "
"of this LED is that it can light up in mixtures of 3 primary colors. "
"Purple, turquoise, orange…"
msgstr ""

#: ../../projects/know color.rst:14 your
msgid ""
"One of the colors red, green, blue and white will light up randomly on "
"the RGB LED on Picobricks, and the name of one of these four colors will "
"be written randomly on the OLED screen at the same time. The user must "
"press the button of Picobricks within 1.5 seconds to use the right of "
"reply. The game will be repeated 10 times, each repetition will get 10 "
"points if the user presses the button when the colors match, or if the "
"user does not press the button when they do not match. If the user "
"presses the button even though the colors do not match, he will lose 10 "
"points. After ten repetitions, the user’s score will be displayed on the "
"OLED screen. If the user wishes, he may not use his right of reply by not"
" pressing the button."
msgstr ""

#: ../../projects/know color.rst:272 your
msgid "|know-your-color2|"
msgstr ""

#: ../../projects/know color.rst:275 your
msgid "know-your-color2"
msgstr ""

#: ../../projects/magic lamp.rst:3
msgid "Magic Lamp"
msgstr ""

#: ../../projects/magic lamp.rst:7
msgid ""
"In this project, we will turn a lamp we use at home on and off with "
"sound. In our project, which we will build using the Picobricks sound "
"level sensor, we will perform the on-off operations by making a clap "
"sound. As in the previous projects, in projects where sensors are used, "
"before we start to write the codes, it will make your progress easier to "
"see what values the sensor sends in the operations we want to do by just "
"operating the sensor, and then writing the codes of the project based on "
"these values."
msgstr ""

#: ../../projects/magic lamp.rst:12
msgid ""
"Most of us have seen lamps flashing magically or doors opening and "
"closing with the sound of clapping in movies. There are set assistants "
"who close these doors and turn off the lamps in the shootings. What if we"
" did this automatically? There are sensors that convert the sound "
"intensity change that we expect to occur in the environment into an "
"electrical signal. These are called sound sensors. In this project, you "
"will learn how to use the Relay module and sound level sensor with "
"Picobiricks, as well as to control the status while preparing a lighting "
"lamp assembly that can flash with clap."
msgstr ""

#: ../../projects/magic lamp.rst:15
msgid ""
"In this project, we will first read the MicroBlocks ``say123 block`` "
"sound intensity sensor values and determine the amount of sound required "
"for the lamp to turn on and off. Then, when this sound level is reached, "
"we will open the relay on the Picobricks and make the lamp connected to "
"the relay light up. Relays can control ``220 volt`` alternating current "
"by turning it on and off. We will again use the sound sensor data to turn"
" the opened lamp back off. Here, we need to use a variable for the lamp "
"to turn on when off and turn off when it is on, with the same amount of "
"sound."
msgstr ""

#: ../../projects/magic lamp.rst:87
msgid "|magic-lamp2|"
msgstr ""

#: ../../projects/magic lamp.rst:90
msgid "magic-lamp2"
msgstr ""

#: ../../projects/maze robot.rst:3 solver
msgid "Maze Solver Robot"
msgstr ""

#: ../../projects/maze robot.rst:7 solver
msgid ""
"In the maze solving robot project, we will use the 2WD robot car kit that"
" comes out of the set."
msgstr ""

#: ../../projects/maze robot.rst:12 solver
msgid ""
"Coding education is as old as the history of programming languages. "
"Today, different products are used to popularize coding education and "
"make it exciting and fun. The first of these is educational robots. "
"Preparing and coding robots improves children’s ``engineering`` and "
"``coding`` skills. Robotics competitions are organized by institutions "
"and organizations to popularize coding education and encourage teachers "
"and students. One of these competitions is the Maze Solver Robot "
"competitions. These robots firstly learn the destination by wandering "
"around the maze and return to the starting point. Then, when they start "
"the labyrinth again, they try to reach their destination in the shortest "
"way possible. Robots use distance sensors while learning about the maze. "
"Infrared or ultrasonic sensors are used in these robots. Smart robot "
"vacuums used in homes and workplaces also work with logic close to the "
"algorithms of maze-solver robots. Thanks to their algorithms that "
"constantly check and map the obstacles, they try to do it completely and "
"without crashing. Most of the smart vacuums are equipped with LIDAR and "
"infrared sensors, which make high-precision laser measurements for "
"distance measurement and obstacle detection. In this project, we will "
"make a simple robot with PicoBricks that you can prepare for maze solver "
"robot competitions."
msgstr ""

#: ../../projects/maze robot.rst:15 solver
msgid ""
"We will use the ``HC-SR04 ultrasonic distance sensor`` so that the robot "
"can detect the distance in front of it and decide its movements on its "
"own. In the maze, the robot will detect the distance in front of the car "
"and move forward if it is empty. If the distance is less than 5 cm, the "
"car will turn right, measure the distance again, if the distance on the "
"right is greater than 5 cm, it will continue on its way, if it is less, "
"it will turn left and move forward. In this way, by turning right and "
"left, we will enable the vehicle to move forward and exit the maze "
"through the empty roads in the maze."
msgstr ""

#: ../../projects/maze robot.rst:163 solver
msgid "|maze-solver-robot1|"
msgstr ""

#: ../../projects/maze robot.rst:166 solver
msgid "maze-solver-robot1"
msgstr ""

#: ../../projects/my timer.rst:3
msgid "My Timer"
msgstr ""

#: ../../projects/my timer.rst:7
msgid ""
"In this project, you will make your own time measuring device using "
"Picobricks, OLED display, button and potentiometer modules. A Timer…"
msgstr ""

#: ../../projects/my timer.rst:12
msgid ""
"Measuring time is a simple but important task that we do in our daily "
"lives without realizing it. A surgeon in surgery, a business person "
"trying to catch up with a meeting, an athlete trying to win, a student "
"trying to finish an exam or a chess match… Smart wrist watches, phones "
"and even professional chronometers are used to measure time. Time is a "
"variable that should be used very accurately in electronic systems. For "
"example, a washing machine; how long the drum will rotate clockwise, how "
"much counterclockwise, how many seconds water must flow in order to "
"dissolve the detergent are tasks done by measuring time. To develop "
"projects where time is of the essence, you need to know how to use it."
msgstr ""

#: ../../projects/my timer.rst:15
msgid ""
"When Picobricks starts, let’s put a statement on the screen that "
"introduces the project and contains instructions. As the user turns the "
"potentiometer, it will set a time in the range of ``0-60 minutes``. When "
"the user presses the button of Picobricks after deciding the time with "
"the potentiometer, it will start counting down in minutes and seconds on "
"the screen. If the button is pressed while the time is running backwards,"
" the Timer will stop and show the remaining time on the screen. If the "
"minute, second and second value reaches zero without pressing the button,"
" a notification stating that the time has expired will be displayed on "
"the screen and the program will be stopped."
msgstr ""

#: ../../projects/my timer.rst:235
msgid "|my-timer2|"
msgstr ""

#: ../../projects/my timer.rst:238
msgid "my-timer2"
msgstr ""

#: ../../projects/night and day.rst:3
msgid "Night and Day"
msgstr ""

#: ../../projects/night and day.rst:7
msgid ""
"This game will be a game that you will use your attention and reflex. In "
"this project, we will use a 0.96” 128x64 pixel I2C OLED display."
msgstr ""

#: ../../projects/night and day.rst:12
msgid ""
"How about playing the Night and Day game you played at school "
"electronically? The game of night and day is a game in which we put our "
"head on the table when our teacher says night, and raise our heads when "
"our teacher says day."
msgstr ""

#: ../../projects/night and day.rst:14
msgid ""
"Since OLED screens can be used as an artificial light source, you can "
"enlarge the characters on the screen using lenses and mirrors and reflect"
" them on the desired plane. Systems that can reflect information, road "
"and traffic information on smart glasses and automobile windows can be "
"made using OLED screens. Light sensors are sensors that can measure the "
"light levels of the environment they are in, also called photodiodes. The"
" electrical conductivity of the sensor exposed to light changes. We can "
"control the light sensor by coding and develop electronic systems that "
"affect the amount of light."
msgstr ""

#: ../../projects/night and day.rst:16
msgid ""
"First we will ask the player to press the button to start the game. Then "
"we will make the OLED screen of PicoBricks display NIGHT and DAY randomly"
" for 2 seconds each. The player should cover the LDR sensor with his hand"
" within 2 seconds if the word written on the OLED screen is NIGHT, and if"
" the word DAY is written on the OLED screen, the player should raise his "
"hand over the LDR sensor. Each correct response of the player will earn "
"10 points. In case of wrong response, the game will be over and there "
"will be a written statement on the screen stating the end of the game, a "
"different tone will sound from the buzzer, and the score information will"
" be displayed on the OLED screen. If the player gives a total of 10 "
"correct responses and gets 100 points, the phrase ``Congratulation`` will"
" be displayed on the OLED screen and the buzzer will play notes in "
"different tones."
msgstr ""

#: ../../projects/night and day.rst:312
msgid "|night-and-day1|"
msgstr ""

#: ../../projects/night and day.rst:315
msgid "night-and-day1"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Blink"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Action-Reaction"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Autonomous Lighting"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Thermometer"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Graphic Monitor"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Dominate the Rhythm"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Show Your Reaction"
msgstr ""

#: ../../projects/projects.rst:26
msgid " My Timer"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Alarm Clock"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Know Your Color"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Magic Lamp"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Smart Cooler"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Buzz Wire Game"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Dinosaur Game"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Night and Day"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Voice Controlled Robot Car"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Two Axis Robot Arm"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Smart House"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Piggy Bank"
msgstr ""

#: ../../projects/projects.rst:26
msgid " NFC Smart Door"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Automatic Trash Bin"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Digital Ruler"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Air Piano"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Maze Solver Robot"
msgstr ""

#: ../../projects/projects.rst:26
msgid " Smart Greenhouse"
msgstr ""

#: ../../projects/projects.rst:26
msgid "Activities From Easy To Difficult:"
msgstr ""

#: ../../projects/projects.rst:3
msgid "Projects"
msgstr ""

#: ../../projects/projects.rst:5
msgid ""
"You can realize many projects with 11 different components of Pico "
"Bricks. Apart from this, you can make projects beyond your dreams by "
"adding unlimited components with 8 different connection types."
msgstr ""

#: ../../projects/projects.rst:7
msgid "**You can make fun projects with PicoBricks.**"
msgstr ""

#: ../../projects/projects.rst:14
msgid "**You can set up home automation systems with PicoBricks.**"
msgstr ""

#: ../../projects/projects.rst:18
msgid "**Here are some projects you can do with detachable PicoBricks.**"
msgstr ""

#: ../../projects/show reaction.rst:3 your
msgid "Show Your Reaction"
msgstr ""

#: ../../projects/show reaction.rst:7 your
msgid ""
"In this project you will learn about the randomness used in every "
"programming language. With Picobricks, we will develop an electronic "
"system using OLED display, Button-LED and Buzzer module. A timer starts "
"running as soon as the Picobricks are turned on. With this timer, we can "
"measure 1 thousandth of a second."
msgstr ""

#: ../../projects/show reaction.rst:12 your
msgid ""
"Now we will prepare a game that develops attention and reflexes. Moving "
"quickly and being able to provide attention for a long time are important"
" developmental characteristics of children. Preschool and primary school "
"children do activities that increase their attention span and reflexes, "
"as they are liked by their parents and teachers. The electronic system we"
" will prepare will be a game that increases attention and develops "
"reflexes. After finishing the project, you can compete with your friends."
" :)"
msgstr ""

#: ../../projects/show reaction.rst:14 your
msgid ""
"Timers are used in many electronic systems in daily life. Timed lighting,"
" ovens, irons, food processors… When our project starts working, we will "
"display a welcome message on the OLED screen. Then we will print on the "
"screen what the user has to do to start the game. In order to start the "
"game, we will ask the player to prepare by counting backwards from 3 on "
"the screen after the button is pressed. After the end of the countdown, "
"the red LED will turn on in a random time between ``2-10 seconds``. We "
"will reset the timer immediately after the red LED lights up. We will "
"measure the timer as soon as the button is pressed again. This value we "
"get will be in milliseconds. We will display this value on the screen as "
"the player’s reaction time."
msgstr ""

#: ../../projects/show reaction.rst:199 your
msgid "|show-your-reaction2|"
msgstr ""

#: ../../projects/show reaction.rst:202 your
msgid "show-your-reaction2"
msgstr ""

#: ../../projects/smart cooler.rst:3
msgid "Smart Cooler"
msgstr ""

#: ../../projects/smart cooler.rst:7
msgid ""
"In our project, we will firstly display the temperature values measured "
"by the DHT11 temperature and humidity sensor on Picobricks. Then, we will"
" define a temperature limit and write the necessary codes for the DC "
"motor connected to Picobricks to start rotating when the temperature "
"value from the DHT11 module reaches this limit, and for the DC motor to "
"stop when the temperature value falls below the limit we have determined."
msgstr ""

#: ../../projects/smart cooler.rst:12
msgid ""
"Air conditioners are used to cool in the summer and warm up in the "
"winter. Air conditioners adjust the degree of heating and cooling "
"according to the temperature of the environment. While cooking the food, "
"the ovens try to rise to the temperature value set by the user and "
"maintain that temperature. These two electronic devices use special "
"temperature sensors to control the temperature. In addition, temperature "
"and humidity are measured together in greenhouses. In order to keep these"
" two values in balance at the desired level, it is tried to provide air "
"flow with the fan. In Picobricks, you can measure temperature and "
"humidity separately and interact with the environment with these "
"measurements. In this project, we will prepare a cooling system that "
"automatically adjusts the fan speed according to the temperature with "
"Picobricks. In this way, you will learn the DC motor operating system and"
" motor speed adjustment."
msgstr ""

#: ../../projects/smart cooler.rst:103
msgid "|smart-cooler1|"
msgstr ""

#: ../../projects/smart cooler.rst:106
msgid "smart-cooler1"
msgstr ""

#: ../../projects/smart greenhouse.rst:3
msgid "Smart Greenhouse"
msgstr ""

#: ../../projects/smart greenhouse.rst:7
msgid ""
"In this project, we will prepare a simple greenhouse with ``IOT "
"technology`` and PicoBricks. We will use PicoBricks with the ESP8266 wifi"
" module in this greenhouse. In this way, we will turn the greenhouse into"
" an object that we can track over the Internet."
msgstr ""

#: ../../projects/smart greenhouse.rst:12
msgid ""
"The rapid changes in climate due to the effect of global warming cause a "
"decrease in productivity in agricultural activities. In the 1500s, Daniel"
" Barbaro built the first known greenhouse in history. Greenhouses are "
"suitable environments for growing plants that can provide controllable "
"air, water, heat and light conditions. In greenhouses, heaters are used "
"to balance the heat, electric water motors for irrigation, fans are used "
"to regulate humidity and to provide pollination. With the development of "
"technology, the producer can follow the status of the greenhouse with his"
" phone from anywhere and can do the work that needs to be done. The "
"general name of this technology is ``Internet of Things`` (IOT). Special "
"sensors are used to measure temperature, humidity and oxygen content in "
"greenhouses. In addition, special sensors measuring soil moisture are "
"used to decide on irrigation. Electronically controlled drip irrigation "
"systems are used to increase irrigation efficiency."
msgstr ""

#: ../../projects/smart greenhouse.rst:14
msgid ""
"The greenhouse model you will prepare will include a soil moisture "
"sensor, and a DHT11 temperature and humidity sensor hanging from the top."
" A submersible pump will be placed in the water tank outside the model, "
"and the hose coming out of the end of the pump will go to the ground in "
"the greenhouse. Picoboard will be placed in a suitable place outside the "
"greenhouse model. When Picobricks starts, it starts to broadcast wifi "
"thanks to the ESP8266 wifi module. When we enter the IP address of "
"Esp8266 from the smart phone connected to the same network, we encounter "
"the web page where we will control the Greenhouse. Here we can see the "
"temperature and humidity values. If we wish, we can start the irrigation "
"process by giving the irrigation command."
msgstr ""

#: ../../projects/smart greenhouse.rst:334
msgid "|smart-greenhouse1|"
msgstr ""

#: ../../projects/smart greenhouse.rst:337
msgid "smart-greenhouse1"
msgstr ""

#: ../../projects/smart-house.rst:3
msgid "Smart House"
msgstr ""

#: ../../projects/smart-house.rst:7
msgid ""
"This sensor HC-SR501, also known as PIR sensor, detects motion by "
"capturing the changes of infrared waves reflected by the human body. When"
" the HC-SR501 PIR sensor detects motion, it gives digital output for 3 "
"seconds. We will use a Picoboard, buzzer and button LED module in the "
"project."
msgstr ""

#: ../../projects/smart-house.rst:14
msgid ""
"Workplaces, factories, homes and even animal shelters… There are "
"different electronic systems that can be used to protect our living "
"spaces against intruders. These systems are produced and marketed as home"
" and workplace security systems. There are systems where the images "
"produced by security cameras are processed and interpreted, as well as "
"security systems that detect the human body and its movements with "
"sensors and take action. Security systems are set up like a kind of alarm"
" clock and give audible and visual warnings when an unidentified activity"
" is detected in the specified time zone. It notifies the business or the "
"home owner, and it can also make automatic notifications to the security "
"units. Gas leakage, fire etc. in such cases, gas sensors are used in "
"homes and workplaces to prevent poisoning. In a negative situation, "
"people living in the environment are warned by giving a loud alarm. We "
"will prepare a model smart home project with PicoBricks using the HC-"
"SR501 and MQ-2 gas sensor."
msgstr ""

#: ../../projects/smart-house.rst:16
msgid ""
"All parts must be in the model. When Picobricks starts, the button must "
"be pressed to activate the alarm system. After pressing the button, we "
"must wait 3 seconds for the hand to be pulled out of the model. At the "
"end of 3 seconds, the red LED lights up and the alarm system is "
"activated. When the alarm system detects a movement, the red LED will "
"start to flash and the buzzer will sound the alarm. To mute it, "
"Picobricks must be restarted.The MQ-2 sensor is always on. When it "
"detects a toxic gas, it will notify you with a buzzer and red LED."
msgstr ""

#: ../../projects/smart-house.rst:161
msgid "|smart-house1|"
msgstr ""

#: ../../projects/smart-house.rst:164
msgid "smart-house1"
msgstr ""

#: ../../projects/thermometer.rst:3
msgid "Thermometer"
msgstr ""

#: ../../projects/thermometer.rst:7
msgid ""
"In this project, you will prepare a thermometer with Picobricks that will"
" display the ambient temperature on the OLED screen."
msgstr ""

#: ../../projects/thermometer.rst:9
msgid ""
"Sensors are the sense organs of electronic systems. We use our skin to "
"feel, our eyes to see, our ears to hear, our tongue to taste, and our "
"nose to smell. There are already many sense organs (sensors) in the "
"picobrix. Also, new ones can be added. You can interact with the "
"environment using humidity, temperature, light and many more sensors. "
"Picobricks can measure the ambient temperature without the need for any "
"other environmental component. Ambient temperature is used in "
"greenhouses, incubators, in environments used for the transport of drugs,"
" briefly in situations where the temperature change must be constantly "
"monitored. If you are going to do an operation on temperature change in "
"your projects, you should know how to measure the ambient temperature."
msgstr ""

#: ../../projects/thermometer.rst:14
msgid ""
"Picobricks has a DHT11 module. This module can sense the temperature and "
"humidity in the environment and send data to the microcontroller. In this"
" project, we will write the necessary codes to print the temperature "
"values measured by the DHT11 temperature and humidity sensor on the OLED "
"screen."
msgstr ""

#: ../../projects/thermometer.rst:115
msgid "|thermometer2|"
msgstr ""

#: ../../projects/thermometer.rst:118
msgid "thermometer2"
msgstr ""

